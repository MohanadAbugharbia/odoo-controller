---
name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: 'choice'
        options:
          - 'major'
          - 'minor'
          - 'patch'



jobs:
  create-version:
    name: Create semantic version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the next version
        run: |
          echo "Getting current version"
          CURRENT_VERSION=$(git describe --tags --abbrev=0 || echo '0.0.0')

          echo "Current version: $CURRENT_VERSION"

          echo "Getting next version"
          # replace . with space so can split into an array
          CURRENT_VERSION_PARTS=(${CURRENT_VERSION//./ })

          # get number parts
          VNUM1=${CURRENT_VERSION_PARTS[0]}
          VNUM2=${CURRENT_VERSION_PARTS[1]}
          VNUM3=${CURRENT_VERSION_PARTS[2]}

          if [[ $VERSION == 'major' ]]
          then
            VNUM1=$((VNUM1+1))
          elif [[ $VERSION == 'minor' ]]
          then
            VNUM2=$((VNUM2+1))
          elif [[ $VERSION == 'patch' ]]
          then
            VNUM3=$((VNUM3+1))
          else
            echo "No version type (https://semver.org/) or incorrect type specified, try: -v [major, minor, patch]"
            exit 1
          fi

          # create new tag
          NEXT_VERSION="$VNUM1.$VNUM2.$VNUM3"

          echo "Next version: $NEXT_VERSION"
          echo "::set-output name=next_version::$NEXT_VERSION"

  build-push:
    name: Build and push
    runs-on: ubuntu-latest
    needs: create-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        run: |
          echo "Building and pushing"
          make docker-buildx VERSION=${{ needs.create-version.outputs.next_version^ }}

      - name: Make install.yaml
        run: |
          echo "Creating install.yaml"
          make build-installer VERSION=${{ needs.create-version.outputs.next_version^ }}

      - name: Archive install.yaml
        uses: actions/upload-artifact@v4
        with:
          name: install.yaml
          path: ./dist/install.yaml
          retention-days: 1

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - create-version
      - build-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get install.yaml
        uses: actions/download-artifact@v4
        with:
          name: install.yaml
          path: ./dist

      - name: create tag and push
        run: |
          echo "Creating tag and pushing"
          git tag -a ${{ needs.create-version.outputs.next_version^ }} -m "Release ${{ needs.create-version.outputs.next_version^ }}"
          git push origin ${{ needs.create-version.outputs.next_version^ }}

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.create-version.outputs.next_version^ }}
          generateReleaseNotes: true
          artifacts: dist/*
          draft: true
